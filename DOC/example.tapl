#Tensor Algebra Programming Language (TAProL) syntax (.tapl)
#AUTHOR: Dmitry I. Lyakh: quant4me@gmail.com

#TAPL complements QMDL (Quantum Method Design Language)
#developed by D.I.Lyakh in 2009-2013 while at QTP.

#Copyright (C) 2014-2022 Dmitry I. Lyakh (Liakh)
#Copyright (C) 2014-2022 Oak Ridge National Laboratory (UT-Battelle)

#LICENSE: BSD 3-Clause

entry: my_tapl_program #first scoping unit to execute

scope my_tapl_program group(CC)
#Declarations:
 space(real|complex): basis0=[1:970],basis1=[0:893]      #define vector spaces
 subspace(basis0): occ=[1:90],virt=[91:970],full=[1:970] #define subspaces of a vector space
 index(occ): i0,i1,k0,k1                                 #assign index labels to the defined subspaces
 index(virt): a0,a1,c0,c1                                #assign index labels to the defined subspaces
 index(full): p1,p2,p3,p4                                #assign index labels to the defined subspaces
#Begin execution:
 load T2(a0,a1,i0,i1): tag("My old tensor")              #this will load a tensor (block-sparse in general)
 V2(i0,i1,a0,a1)=method("2e Coulomb"): [i0<i1] [a0<a1] sparse("Scheme0") #this will generate the given tensor slice
 V2(i0,i1,a0,a1)=>method("2e Coulomb")                                   #this will defer the generator to upon necessity
 Z2(a0,a1,i0,i1)=>Y(a0,p1,p2)*Y(a1,p2,p3)*Y(i0,p3,p4)*Y(i1,p4,p1) #impose a specific factorized structure on the tensor (MPS here)
 Z3(a0,a1,i0,i1)=V2(i0,k0,a0,c0)*T2(c0,a1,k0,i1): [i0<i1] [a0<a1] sparse("Scheme1") #tensor contraction with restrictions
 save Z3(a0,a1,i0,i1): tag("My new tensor")              #save a tensor slice
 save V2: tag("My integrals")                            #save the full tensor
 destroy V2,T2,Z3(a0,a1,i0,i1)                           #destroy full V2 and T2, and a slice of Z3
 export Z4(a0,a1,i0,i1): tag("My Z4")                    #this will expose a Z4 slice to other scoping units belonging to the same group with read permissions
 export Z4(a0,a1,i0,i1): tag("My Z4") to(CC:w)           #this will expose a Z4 slice to the scoping group CC with write permissions
 invoke DIIS_algorithm                                   #invoke another scoping unit
 import C0(): tag("Scalar")                              #import the result from another scoping unit
end scope my_tapl_program

scope DIIS_algrithm group(CC)
 import S2(a0,a1,i0,i1): tag("My Z4")           #this will import a tensor exported by another scoping unit, the indices will become defined automatically
 index: a2=a1,i2=i1                             #indices a2 and i2 will be assigned the same subranges as a1 and i1, respectively
 D0()=S2(a0,a1,i0,i1)*S2(a0,a1,i0,i1)           #full tensor contraction
 export D0(): tag("Scalar") to(CC:r)            #export the result to the scoping group CC with read-only permissions
end scope DIIS_algorithm
